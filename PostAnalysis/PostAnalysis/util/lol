
  std::vector<TH1F*> PDF_H = {PDF_H_V[0][0], PDF_H_V[1][1], PDF_H_V[2][2], PDF_H_V[3][3]}; 
  std::vector<std::vector<RooRealVar*>> Lumi; 
  for (int i(0); i < PDF_H_V.size(); i++)
  {
    std::vector<RooRealVar*> l_var = ProtectionRealVariable("l", PDF_H_V[i], Params, 0, Data[i] -> Integral()); 
    Lumi.push_back(l_var); 
  } 

  std::vector<RooRealVar*> s_var = ProtectionRealVariable("s", PDF_H, Params, 0.0001, 0.0002); 
  std::vector<RooRealVar*> m_var = ProtectionRealVariable("m", PDF_H, Params, -0.0001, 0.0001); 

  // Create the resolution model: Gaussian 
  std::vector<TString> g_N = NameGenerator(PDF_H, "_Gx");
  std::vector<RooGaussian*> g_vars = RooGaussianVariable(g_N, x, m_var, s_var); 
  
  // Create the PDFs for the model 
  std::vector<TString> pdf_N_D = NameGenerator(PDF_H, "_D"); 
  std::vector<RooDataHist*> pdf_D = RooDataVariable(pdf_N_D, x, PDF_H); 
  std::vector<TString> pdf_N_P = NameGenerator(PDF_H, "_P"); 
  std::vector<RooHistPdf*> pdf_P = RooPdfVariable(pdf_N_P, x, pdf_D); 

  // Convolve the Gaussian and the PDFs
  std::vector<TString> pxg_N = NameGenerator(PDF_H, "_PxG"); 
  std::vector<RooFFTConvPdf*> PxG_vars = RooFFTVariable(pxg_N, x, g_vars, pdf_P); 

  RooArgList PxG; 
  std::vector<RooArgList> L_Args; 
  for (int i(0); i < PxG_vars.size(); i++)
  {
    RooArgList L; 
    for (int j(0); j < Lumi[i].size(); j++){L.add(*Lumi[i][j]);}
    L_Args.push_back(L); 

    PxG.add(*PxG_vars[i]); 
  }

  RooAddPdf trk1_M("trk1_F", "trk1_F", PxG, L_Args[0]); 
  RooAddPdf trk2_M("trk2_F", "trk2_F", PxG, L_Args[1]); 
  RooAddPdf trk3_M("trk3_F", "trk3_F", PxG, L_Args[2]); 
  RooAddPdf trk4_M("trk4_F", "trk4_F", PxG, L_Args[3]); 

  std::vector<TString> Name_D = NameGenerator(Data, "_D");
  std::vector<RooDataHist*> Data_D = RooDataVariable(Name_D, x, Data);  
 
  RooCategory sample("Sample", "Sample"); 
  sample.defineType("trk1"); 
  sample.defineType("trk2"); 
  sample.defineType("trk3"); 
  sample.defineType("trk4"); 

  RooDataHist ComData("ComData", "ComData", *x, Index(sample), Import("trk1", *Data_D[0]), Import("trk2", *Data_D[1]), Import("trk3", *Data_D[2]), Import("trk4", *Data_D[3])); 
  
  RooSimultaneous simPdf("simPdf", "simPdf", sample);
  simPdf.addPdf(trk1_M, "trk1"); 
  simPdf.addPdf(trk2_M, "trk2"); 
  simPdf.addPdf(trk3_M, "trk3"); 
  simPdf.addPdf(trk4_M, "trk4"); 

  RooAbsReal* nll = simPdf.createNLL(ComData, NumCPU(6, true)); 
  Minimization(nll, Params); 


  for (int i(0); i < PDF_H_V.size(); i++)
  {
    for (int j(0); j < PDF_H_V[i].size(); j++)
    {
      CopyPDFToTH1F(PxG_vars[j], x, PDF_H_V[i][j], Data[0]); 
      float e = Lumi[i][j] -> getVal(); 
      Normalize(PDF_H_V[i][j]); 
      PDF_H_V[i][j] -> Scale(e); 
    } 
  }

  return Params; // Change after
